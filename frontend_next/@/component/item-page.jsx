/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/F3tXpTqD0LP
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Archivo } from 'next/font/google'

archivo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useMemo } from "react"
import { Input } from "@/components/ui/input"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuCheckboxItem, DropdownMenuRadioGroup, DropdownMenuRadioItem } from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"

export function ItemPage() {
  const [searchTerm, setSearchTerm] = useState("")
  const [filters, setFilters] = useState({
    category: [],
    price: {
      min: 0,
      max: 1000,
    },
  })
  const [sortBy, setSortBy] = useState("featured")
  const items = [
    {
      id: 1,
      name: "Kayak",
      price: 50,
      category: "Outdoor",
      renter: "John Doe",
      image: "/placeholder.svg",
    },
    {
      id: 2,
      name: "Camping Gear",
      price: 75,
      category: "Outdoor",
      renter: "Jane Smith",
      image: "/placeholder.svg",
    },
    {
      id: 3,
      name: "DJ Equipment",
      price: 100,
      category: "Electronics",
      renter: "Bob Johnson",
      image: "/placeholder.svg",
    },
    {
      id: 4,
      name: "Party Supplies",
      price: 25,
      category: "Household",
      renter: "Sarah Lee",
      image: "/placeholder.svg",
    },
    {
      id: 5,
      name: "Power Tools",
      price: 80,
      category: "Tools",
      renter: "Mike Brown",
      image: "/placeholder.svg",
    },
    {
      id: 6,
      name: "Formal Wear",
      price: 60,
      category: "Clothing",
      renter: "Emily Davis",
      image: "/placeholder.svg",
    },
  ]
  const filteredItems = useMemo(() => {
    return items
      .filter((item) => {
        if (filters.category.length > 0 && !filters.category.includes(item.category)) {
          return false
        }
        if (item.price < filters.price.min || item.price > filters.price.max) {
          return false
        }
        return item.name.toLowerCase().includes(searchTerm.toLowerCase());
      })
      .sort((a, b) => {
        switch (sortBy) {
          case "featured":
            return b.featured - a.featured
          case "low":
            return a.price - b.price
          case "high":
            return b.price - a.price
          default:
            return 0
        }
      });
  }, [searchTerm, filters, sortBy])
  const handleSearch = (e) => {
    setSearchTerm(e.target.value)
  }
  const handleFilterChange = (type, value) => {
    if (type === "category") {
      setFilters({
        ...filters,
        category: filters.category.includes(value)
          ? filters.category.filter((item) => item !== value)
          : [...filters.category, value],
      })
    } else if (type === "price") {
      setFilters({
        ...filters,
        price: {
          ...filters.price,
          [value.key]: value.val,
        },
      })
    }
  }
  const handleSort = (value) => {
    setSortBy(value)
  }
  return (
    (<div className="container mx-auto py-8">
      <div className="flex justify-between items-center mb-6">
        <div className="relative w-full max-w-md">
          <div className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            type="search"
            placeholder="Search items..."
            className="w-full rounded-lg bg-background pl-8"
            value={searchTerm}
            onChange={handleSearch} />
        </div>
        <div className="flex gap-2">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm" className="h-9 gap-1">
                <FilterIcon className="h-4 w-4" />
                <span>Filters</span>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-56">
              <DropdownMenuLabel>Filter by</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuCheckboxItem
                checked={filters.category.includes("Outdoor")}
                onCheckedChange={() => handleFilterChange("category", "Outdoor")}>
                Outdoor
              </DropdownMenuCheckboxItem>
              <DropdownMenuCheckboxItem
                checked={filters.category.includes("Electronics")}
                onCheckedChange={() => handleFilterChange("category", "Electronics")}>
                Electronics
              </DropdownMenuCheckboxItem>
              <DropdownMenuCheckboxItem
                checked={filters.category.includes("Household")}
                onCheckedChange={() => handleFilterChange("category", "Household")}>
                Household
              </DropdownMenuCheckboxItem>
              <DropdownMenuCheckboxItem
                checked={filters.category.includes("Tools")}
                onCheckedChange={() => handleFilterChange("category", "Tools")}>
                Tools
              </DropdownMenuCheckboxItem>
              <DropdownMenuCheckboxItem
                checked={filters.category.includes("Clothing")}
                onCheckedChange={() => handleFilterChange("category", "Clothing")}>
                Clothing
              </DropdownMenuCheckboxItem>
              <DropdownMenuSeparator />
              <DropdownMenuLabel>Price Range</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <div className="grid gap-2">
                <div className="flex items-center gap-2">
                  <Label htmlFor="min-price">Min:</Label>
                  <Input
                    id="min-price"
                    type="number"
                    value={filters.price.min}
                    onChange={(e) =>
                      handleFilterChange("price", {
                        key: "min",
                        val: Number(e.target.value),
                      })
                    }
                    className="w-24" />
                </div>
                <div className="flex items-center gap-2">
                  <Label htmlFor="max-price">Max:</Label>
                  <Input
                    id="max-price"
                    type="number"
                    value={filters.price.max}
                    onChange={(e) =>
                      handleFilterChange("price", {
                        key: "max",
                        val: Number(e.target.value),
                      })
                    }
                    className="w-24" />
                </div>
              </div>
            </DropdownMenuContent>
          </DropdownMenu>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm" className="h-9 gap-1">
                <ListOrderedIcon className="h-4 w-4" />
                <span>Sort</span>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-56">
              <DropdownMenuLabel>Sort by</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuRadioGroup value={sortBy} onValueChange={handleSort}>
                <DropdownMenuRadioItem value="featured">Featured</DropdownMenuRadioItem>
                <DropdownMenuRadioItem value="low">Price: Low to High</DropdownMenuRadioItem>
                <DropdownMenuRadioItem value="high">Price: High to Low</DropdownMenuRadioItem>
              </DropdownMenuRadioGroup>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
      <div
        className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
        {filteredItems.map((item) => (
          <div
            key={item.id}
            className="bg-background rounded-lg overflow-hidden shadow-sm">
            <img
              src="/placeholder.svg"
              alt={item.name}
              width={400}
              height={300}
              className="w-full h-48 object-cover" />
            <div className="p-4">
              <h3 className="text-lg font-semibold">{item.name}</h3>
              <p className="text-muted-foreground">Rented by {item.renter}</p>
              <div className="flex justify-between items-center mt-4">
                <span className="text-primary font-semibold">${item.price}/day</span>
                <Button size="sm">Rent Now</Button>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>)
  );
}

function FilterIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3" />
    </svg>)
  );
}


function ListOrderedIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <line x1="10" x2="21" y1="6" y2="6" />
      <line x1="10" x2="21" y1="12" y2="12" />
      <line x1="10" x2="21" y1="18" y2="18" />
      <path d="M4 6h1v4" />
      <path d="M4 10h2" />
      <path d="M6 18H4c0-1 2-2 2-3s-1-1.5-2-1" />
    </svg>)
  );
}
